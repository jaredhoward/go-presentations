Introduction to the Go Language
10 Jun 2014

Jared Howard
Senior Software Developer, Rakuten MediaForge

* Useful learning tools

- http://tour.golang.com/ (A Tour of Go)
- http://golang.org/doc/effective_go.html (Effective Go)
- http://golang.org/ref/spec (The Go Programming Language Specification)
- http://golang.org/doc/code.html (How to Write Go Code)

* Packages

Every Go program is made up of packages.

Programs start running in package main.

.code introduction-to-go/hello-world.go

* Exported names

A name is exported if it begins with a capital letter.

- `Foo` is exported
- `foo` is not exported

* Built-in functions

.code introduction-to-go/built-in

* Functions

A function can take zero or more arguments. When two or more consecutive named function parameters share a type, you can omit the type from all but the last.

.play introduction-to-go/simple-math.go

* Functions (multiple results)

A function can return any number of results.

This function returns two strings.

.play introduction-to-go/swap.go

* Functions (named results)

Functions take parameters. In Go, functions can return multiple "result parameters", not just a single value. They can be named and act just like variables.

If the result parameters are named, a return statement without arguments returns the current values of the results.

.code introduction-to-go/split.go

* Variables

The var statement declares a list of variables; as in function argument lists, the type is last.

.code introduction-to-go/variables.go

* Variables with initializers

A var declaration can include initializers, one per variable.

If an initializer is present, the type can be omitted; the variable will take the type of the initializer.

.code introduction-to-go/variables-initializers.go

* Short variable declarations

Inside a function, the := short assignment statement can be used in place of a `var` declaration with implicit type.

Outside a function, every construct begins with a keyword (`var`, `func`, and so on) and the := construct is not available.

.code introduction-to-go/variables-short-declaration.go

* Basic types

Go's basic types are:

.code introduction-to-go/type-basic

* Boolean types

The predeclared boolean type is `bool`.

Values are denoted by the predeclared constants `true` and `false`.

* String types

Represents the set of string values. A string value is a (possibly empty) sequence of bytes. The predeclared string type is `string`.

* Numeric types

.code introduction-to-go/type-numeric

* Pointer types

Go has pointers, but no pointer arithmetic.

A pointer type denotes the set of all pointers to variables of a given type, called the _base_type_ of the pointer. The value of an uninitialized pointer is `nil`.

.code introduction-to-go/type-pointer

* Array types

An array is a numbered sequence of elements of a single type, called the element type. The number of elements is called the length and is never negative.

.code introduction-to-go/type-array

* Slice types

A slice is a descriptor for a contiguous segment of an _underlying_array_ and provides access to a numbered sequence of elements from that array. A slice type denotes the set of all slices of arrays of its element type. The value of an uninitialized slice is `nil`.

Like arrays, slices are indexable and have a length. The length of a slice can be discovered by the built-in function `len`; unlike with arrays it may change during execution.

.code introduction-to-go/type-slice

* Map types

A map is an unordered group of elements of one type, called the element type, indexed by a set of unique _keys_ of another type, called the key type. The value of an uninitialized map is `nil`.

.code introduction-to-go/type-map

* Struct types

A struct is a sequence of named elements, called fields, each of which has a name and a type. Within a struct, non-blank field names must be unique.

Struct fields are accessed using a dot.

.code introduction-to-go/type-struct

* Struct types (anonymous field)

A field declared with a type but no explicit field name is an _anonymous_field_, also called an _embedded_ field or an embedding of the type in the struct. The unqualified type name acts as the field name.

.code introduction-to-go/type-struct-anonymous

* Struct literals

A struct literal denotes a newly allocated struct value by listing the values of its fields.

You can list just a subset of fields by using the `Name`: syntax. (And the order of named fields is irrelevant.)

.code introduction-to-go/struct-literals.go /type Vertex/,/^\)/

* Methods

Go does not have classes. However, you can define methods on struct types.

The _method_receiver_ appears in its own argument list between the `func` keyword and the method name.

.code introduction-to-go/methods.go

* Interface types

An interface type specifies a method set called its _interface_. A variable of interface type can store a value of any type with a method set that is any superset of the interface. Such a type is said to _implement_the_interface_. The value of an uninitialized variable of interface type is `nil`.

.code introduction-to-go/type-interface

* Interfaces are satisfied implicitly

A type implements an interface by implementing the methods.

_There_is_no_explicit_declaration_of_intent._

Implicit interfaces decouple implementation packages from the packages that define the interfaces: neither depends on the other.

It also encourages the definition of precise interfaces, because you don't have to find every implementation and tag it with the new interface name.

* Channel types

A channel provides a mechanism for two concurrently executing functions to synchronize execution and communicate by passing a value of a specified element type. The value of an uninitialized channel is `nil`.

The `<-` operator specifies the channel _direction_, _send_ or _receive_. If no direction is given, the channel is _bi-directional_.

.code introduction-to-go/type-channel

* Type conversions

The expression `T(v)` converts the value `v` to the type `T`.

Some numeric conversions:

.code introduction-to-go/type-conversion

* Constants

Constants are declared like variables, but with the `const` keyword.

Constants can be character, string, boolean, or numeric values.

Constants cannot be declared using the := syntax.

.play introduction-to-go/constants.go

* Errors

An error is anything that can describe itself as an error string. The idea is captured by the predefined, built-in interface type, `error`, with its single method, `Error`, returning a string:

.code introduction-to-go/errors

* For

Go has only one looping construct, the `for` loop.

.play introduction-to-go/for.go /func main/,/^}/

* Forever

If you omit the loop condition it loops forever, so an infinite loop is compactly expressed.

.code introduction-to-go/for-infinite.go

* Range

The `range` form of the `for` loop iterates over a slice or map.

.play introduction-to-go/range.go

* If

The `if` statement looks as it does in C or Java, except that the `()` are gone and the `{}` are required.

.code introduction-to-go/if.go /func sqrt/,/^}/

* If with a short statement

Like `for`, the `if` statement can start with a short statement to execute before the condition.

Variables declared by the statement are only in scope until the end of the `if`.

.code introduction-to-go/if-short-statement.go /func pow/,/^}/

* If and else

Variables declared inside an `if` short statement are also available inside any of the `else` blocks.

.code introduction-to-go/if-else.go /func pow/,/^}/

* Switch

You probably knew what `switch` was going to look like.

A case body breaks automatically, unless it ends with a `fallthrough` statement.

.play introduction-to-go/switch.go /func main/,/^}/

* Switch with no condition

Switch without a condition is the same as switch true.

This construct can be a clean way to write long if-then-else chains.

.play introduction-to-go/switch-no-condition.go /func main/,/^}/

* Goroutines

A goroutine is a lightweight thread managed by the Go runtime.

.code introduction-to-go/goroutines /^go/,/\)/

starts a new goroutine running

.code introduction-to-go/goroutines /^f/,/\)/

.play introduction-to-go/goroutines.go /START OMIT/,/END OMIT/
